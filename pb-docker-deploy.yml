---
##################
## pb-docker-deploy.yml
##
## This playbook manages and deploys docker services on the remote server using
##  the docker-compose files located in the '/var/opt/hpviz/docker' directory
##    docker-compose.override.yml is merged for production overrides
##
##  Remote Requirements:
##    - docker container service running
##    - docker-compose installed
##
- name: Deploy Docker Containers
  hosts: viz
  gather_facts: no
  become: True

  tasks:

    - name: Check Project directory exist
      file:
        path: /var/opt/hpviz/docker
        state: directory
      when:
        ansible_host!="localhost"

    - name: check docker-compose.yml exists
      copy:
        src: docker/docker-compose.yml
        dest: /var/opt/hpviz/docker
      when:
        ansible_host!="localhost"

    - name: check docker-compose.override.yml exists
      copy:
        src: docker/docker-compose.override.yml
        dest: /var/opt/hpviz/docker
      when:
        ansible_host!="localhost"

    - name: Check required Variables Exist
      assert:
        that:
          - hpviz_nginx_etc_dir is defined
          - hpviz_nginx_etc_dir | length > 0
          - hpviz_nginx_html_dir is defined
          - hpviz_nginx_html_dir | length > 0
          - hpviz_nginx_sock_file is defined
          - hpviz_nginx_sock_file | length > 0

    ## Docker Compose deploy below

    # - name: Tear down existing HPViz services
    #   docker_compose:
    #     project_name: hpviz
    #     project_src: /var/opt/hpviz/docker
    #     state: absent

    # - name: Bring up HPViz services
    #   docker_compose:
    #     project_name: hpviz
    #     project_src: /var/opt/hpviz/docker
    #     files:
    #       - docker-compose.yml
    #       - docker-compose.override.yml
    #     state: present
    #     remove_orphans: yes
    #   register: output

    ## END Docker Compose deploy

    ### Restricted
    - name: Deploy Zookeeper container
      docker_container:
        name: zookeeper
        image: confluentinc/cp-zookeeper
        hostname: zookeeper
        restart: yes
        restart_policy: unless-stopped
        state: absent
        #ports:
        #  - "2181:2181"
        expose:
          - "2181"
        env:
          ZOOKEEPER_CLIENT_PORT: "2181"
          ZOOKEEPER_TICK_TIME: "2000"
      tags: zookeeper

    - name: Deploy Kafka Broker
      docker_container:
        name: broker
        image: confluentinc/cp-server:5.5.1
        hostname: broker
        restart: yes
        restart_policy: unless-stopped
        state: absent
        links:
          - zookeeper:zookeeper
        ports:
          - "9092:9092"
          - "9093:9093"
        expose:
          - "29092"
        env:
          KAFKA_BROKER_ID: "1"
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "LISTENER_INTERNAL:PLAINTEXT,LISTENER_PLAINTEXT:PLAINTEXT,LISTENER_EXT:PLAINTEXT"
          KAFKA_ADVERTISED_LISTENERS: "LISTENER_INTERNAL://broker:29092,LISTENER_PLAINTEXT://viz001.ecu-sri.net:9092,LISTENER_EXT://viz001.ecu-sri.net:9093"
          KAFKA_LISTENERS: "LISTENER_INTERNAL://broker:29092,LISTENER_PLAINTEXT://0.0.0.0:9092, LISTENER_EXT://0.0.0.0:9093"
          KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
          KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: "1"
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
          KAFKA_JMX_PORT: "9101"
          KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
          KAFKA_CREATE_TOPICS: "logging.syslog.raw"
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker:29092"
          CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
          CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: "1"
          CONFLUENT_METRICS_ENABLE: 'true'
          CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
          KAFKA_INTER_BROKER_LISTENER_NAME: "LISTENER_INTERNAL"
      tags: broker

    - name: Deploy NIFI container
      docker_container:
        name: nifi
        image: apache/nifi:latest
        restart: yes
        restart_policy: unless-stopped
        state: absent
        links:
          - zookeeper:zookeeper
          - broker:broker
        ports:
          - "9090:8080"
          - "514:514"
        expose:
          - "9090"
        env:
          VIRTUAL_HOST: "viz001.ecu-sri.net"
          LETSENCRYPT_HOST: "viz001.ecu-sri.net"
          VIRTUAL_PROTO: "http"
          VIRTUAL_PORT: "9090"
      tags: nifi
