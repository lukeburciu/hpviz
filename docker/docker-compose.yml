---
version: '3.2'
services:

# Proxy
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-data:/etc/nginx/certs
      - nginx-data:/etc/nginx/vhost.d
      - nginx-data:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro

  nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - nginx-data:/etc/nginx/certs
      - nginx-data:/etc/nginx/vhost.d
      - nginx-data:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=["lburciu@our.ecu.edu.au", "sceaton@our.ecu.edu.au"]

# VECTOR CONFIGURATION\

vector:
  image: timberio/vector:latest-alpine
  hostname: vector-viz001
  container_name: vector
  ports:
    - "9000"
  expose:
    - "9000"
  volumes:
    - /opt/hpviz/docker/viz001.vector.toml:/etc/vector/vector.toml:ro
    - /var/run/docker.sock:/var/run/docker.sock


# RESTRICTED
  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:5.5.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "LISTENER_INTERNAL:PLAINTEXT,LISTENER_PLAINTEXT:PLAINTEXT,LISTENER_EXT:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "LISTENER_INTERNAL://broker:29092,LISTENER_PLAINTEXT://viz001.ecu-sri.net:9092,LISTENER_EXT://viz001.ecu-sri.net:9093"
      KAFKA_LISTENERS: "LISTENER_INTERNAL://broker:29092,LISTENER_PLAINTEXT://0.0.0.0:9092, LISTENER_EXT://0.0.0.0:9093"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT


  connect:
    image: confluentinc/cp-kafka-connect
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    volumes:
      - $HOME/hpviz/docker/kafka-sink35/connect/plugins:/tmp/connect-plugins
    environment:
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'WARN'
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9093'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: /usr/share/java,/tmp/connect-plugins,/usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=WARN,org.I0Itec.zkclient=WARN,org.reflections=ERROR
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt neo4j/kafka-connect-neo4j:1.0.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:latest
        /etc/confluent/docker/run

  schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:5.5.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:9093"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.0.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - http.port=9200
      - ELASTIC_PASSWORD=password
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - "9200:9200"
      - "9300:9300"


  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:5.5.1
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.5.1
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:9093'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  nifi-registry:
      container_name: nifi-registry
      image: apache/nifi-registry
      ports:
        - "18080:18080"

# EXPOSED TO INTERNET

  neo4j:
    image: neo4j:3.5
    hostname: neo4j
    container_name: neo4j
    ports:
      - "17474:17474"
      - "17687:17687"
    expose:
      - "17474"
    depends_on:
      - broker
      - connect
    volumes:
      - $HOME/hpviz/docker/kafka-sink35/neo4j/conf:/conf
      - $HOME/hpviz/docker/kafka-sink35/neo4j/data:/data
      - $HOME/hpviz/docker/kafka-sink35/neo4j/logs:/logs
      - $HOME/hpviz/docker/kafka-sink35/neo4j/metrics:/metrics
      - $HOME/hpviz/docker/kafka-sink35/neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_connector_http_listen__address=:17474
      - NEO4J_dbms_connector_https_listen__address=:17473
      - NEO4J_dbms_connector_bolt_listen__address=:17687
      - NEO4JLABS_PLUGINS=["apoc"]
      - VIRTUAL_HOST=neo4j.viz001.ecu-sri.net
      - LETSENCRYPT_HOST=neo4j.viz001.ecu-sri.net
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=17474


  nifi:
      image: apache/nifi:latest

      depends_on:
        - broker
        - zookeeper
      ports:
        - "9090:8080"
      expose:
        - "9090"
      environment:
        - VIRTUAL_HOST=nifi.viz001.ecu-sri.net
        - LETSENCRYPT_HOST=nifi.viz001.ecu-sri.net
        - VIRTUAL_PROTO=https
        - VIRTUAL_PORT=9090

  grafana:
      image: grafana/grafana
      ports:
      - 3000:3000
      container_name: grafana
      environment:
        - VIRTUAL_HOST=grafana.viz001.ecu-sri.net
        - LETSENCRYPT_HOST=grafana.viz001.ecu-sri.net
        - VIRTUAL_PROTO=https
        - VIRTUAL_PORT=3000

  dejavu:
    image: appbaseio/dejavu:3.2.3
    container_name: dejavu
    ports:
      - "1358:1358"
    expose:
      - "1358"
    links:
      - elasticsearch
    environment:
      - VIRTUAL_HOST=dejavu.viz001.ecu-sri.net
      - LETSENCRYPT_HOST=dejavu.viz001.ecu-sri.net
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=1358


volumes:
  nginx-data:
